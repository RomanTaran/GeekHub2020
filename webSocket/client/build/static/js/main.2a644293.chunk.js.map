{"version":3,"sources":["socket-api.js","components/TodoTextInput.js","components/Header.js","components/TodoFilters.js","components/Footer.js","components/TodoItem.js","components/TodoList.js","components/MainSection.js","components/App.js","reducers/todos.js","reducers/index.js","constants/ActionTypes.js","index.js"],"names":["socket","openSocket","transports","TodoTextInput","Component","state","text","this","props","handleSubmit","e","target","value","trim","which","onSave","newTodo","setState","handleChange","emit","on","msg","handleBlur","render","className","classnames","edit","editing","type","placeholder","autoFocus","onBlur","onChange","onKeyDown","Header","addTodo","length","FILTER_TITLES","Footer","visibilityFilter","activeCount","completedCount","setFilter","clearCompleted","itemWord","Object","keys","map","filter","key","selected","style","cursor","onClick","TodoItem","handleDoubleClick","handleSave","id","deleteTodo","editTodo","todo","completeTodo","element","_id","checked","completed","onDoubleClick","TodoList","todos","MainSection","toggleAllTodo","useState","todosCount","visibleTodos","t","Error","readOnly","App","setTodos","useEffect","Math","random","every","initialState","rootReducer","combineReducers","action","payload","console","log","areAllMarked","store","createStore","reducer","applyMiddleware","thunk","document","getElementById"],"mappings":"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","file":"static/js/main.2a644293.chunk.js","sourcesContent":["import openSocket from 'socket.io-client'\nvar socket = openSocket('http://localhost:8000',{ transports: ['websocket', 'polling', 'flashsocket'] });\n\nexport default socket;\n\nexport function socket_init(){\n  console.log('connected to socket');\n}","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport socket from \"../socket-api\";\n\nexport default class TodoTextInput extends Component {\n  static propTypes = {\n    onSave: PropTypes.func.isRequired,\n    text: PropTypes.string,\n    placeholder: PropTypes.string,\n    editing: PropTypes.bool,\n    newTodo: PropTypes.bool\n  };\n\n  state = {\n    text: this.props.text || \"\"\n  };\n\n  handleSubmit = e => {\n    const text = e.target.value.trim();\n    if (e.which === 13) {\n      this.props.onSave(text);\n      if (this.props.newTodo) {\n        this.setState({ text: \"\" });\n      }\n    }\n  };\n\n  handleChange = e => {\n    socket.emit('onChange',e.target.value);\n    socket.on('onChangeYes',(msg)=>{\n      this.setState({ text: msg});\n    })\n\n  };\n\n  handleBlur = e => {\n    if (!this.props.newTodo) {\n      this.props.onSave(e.target.value);\n    }\n  };\n\n  render() {\n    return (\n      <input\n        className={classnames({\n          edit: this.props.editing,\n          \"new-todo\": this.props.newTodo\n        })}\n        type=\"text\"\n        placeholder={this.props.placeholder}\n        autoFocus={true}\n        value={this.state.text}\n        onBlur={this.handleBlur}\n        onChange={this.handleChange}\n        onKeyDown={this.handleSubmit}\n      />\n    );\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport TodoTextInput from './TodoTextInput'\n\nconst Header = ({ addTodo }) => (\n  <header className=\"header\">\n    <h1>todos</h1>\n    <TodoTextInput\n      newTodo\n      onSave={(text) => {\n        if (text.length !== 0) {\n          addTodo(text)\n        }\n      }}\n      placeholder=\"What needs to be done?\"\n    />\n  </header>\n)\n\nHeader.propTypes = {\n  addTodo: PropTypes.func.isRequired\n}\n\nexport default Header","export const SHOW_ALL = \"show_all\";\nexport const SHOW_COMPLETED = \"show_completed\";\nexport const SHOW_ACTIVE = \"show_active\";\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport { SHOW_ALL, SHOW_COMPLETED, SHOW_ACTIVE } from \"./TodoFilters\";\n\nconst FILTER_TITLES = {\n  [SHOW_ALL]: \"All\",\n  [SHOW_ACTIVE]: \"Active\",\n  [SHOW_COMPLETED]: \"Completed\"\n};\n\nconst Footer = ({\n  visibilityFilter,\n  activeCount,\n  completedCount,\n  setFilter,\n  clearCompleted\n}) => {\n  const itemWord = activeCount === 1 ? \"item\" : \"items\";\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        <strong>{activeCount || \"No\"}</strong> {itemWord} left\n      </span>\n      <ul className=\"filters\">\n        {Object.keys(FILTER_TITLES).map(filter => (\n          <li key={filter}>\n            {/* eslint-disable jsx-a11y/anchor-is-valid */}\n            <a\n              className={classnames({ selected: filter === visibilityFilter })}\n              style={{ cursor: \"pointer\" }}\n              onClick={() => setFilter(filter)}\n            >\n              {FILTER_TITLES[filter]}\n            </a>\n          </li>\n        ))}\n      </ul>\n      {!!completedCount && (\n        <button className=\"clear-completed\" onClick={clearCompleted}>\n          Clear completed\n        </button>\n      )}\n    </footer>\n  );\n};\n\nFooter.propTypes = {\n  visibilityFilter: PropTypes.string.isRequired,\n  completedCount: PropTypes.number.isRequired,\n  activeCount: PropTypes.number.isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n  setFilter: PropTypes.func.isRequired\n};\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport TodoTextInput from \"./TodoTextInput\";\nimport { completeTodo } from \"../actions\";\n\nexport default class TodoItem extends Component {\n  static propTypes = {\n    todo: PropTypes.object.isRequired,\n    editTodo: PropTypes.func.isRequired,\n    deleteTodo: PropTypes.func.isRequired,\n    toggleTodo: PropTypes.func.isRequired\n  };\n\n  state = {\n    editing: false\n  };\n\n  handleDoubleClick = () => {\n    this.setState({ editing: true });\n  };\n\n  handleSave = (id, text) => {\n    if (text.length === 0) {\n      this.props.deleteTodo(id);\n    } else {\n      this.props.editTodo(id, text);\n    }\n    this.setState({ editing: false });\n  };\n\n  render() {\n    const { todo, completeTodo, deleteTodo } = this.props;\n\n    let element;\n    if (this.state.editing) {\n      element = (\n        <TodoTextInput\n          text={todo.text}\n          editing={this.state.editing}\n          onSave={text => this.handleSave(todo._id, text)}\n        />\n      );\n    } else {\n      element = (\n        <div className=\"view\">\n          <input\n            className=\"toggle\"\n            type=\"checkbox\"\n            checked={todo.completed}\n            onChange={() => completeTodo(todo)}\n          />\n          <label onDoubleClick={this.handleDoubleClick}>{todo.text}</label>\n          <button className=\"destroy\" onClick={() => deleteTodo(todo)} />\n        </div>\n      );\n    }\n\n    return (\n      <li\n        key={classnames({id:todo._id})}\n        className={classnames({\n          completed: todo.completed,\n          editing: this.state.editing\n        })}\n      >\n        {element}\n      </li>\n    );\n  }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TodoItem from \"./TodoItem\";\nimport { completeTodo } from \"../actions\";\n\nconst TodoList = ({ todos, editTodo, deleteTodo, completeTodo }) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <TodoItem\n        key={todo.id}\n        todo={todo}\n        editTodo={editTodo}\n        completeTodo={completeTodo}\n        deleteTodo={deleteTodo}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n      text: PropTypes.string.isRequired\n    }).isRequired\n  ).isRequired,\n  editTodo: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  toggleTodo: PropTypes.func.isRequired\n};\n\nexport default TodoList;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Footer from \"./Footer\";\nimport TodoList from \"./TodoList\";\nimport { SHOW_ACTIVE, SHOW_ALL, SHOW_COMPLETED } from \"./TodoFilters\";\n\nconst MainSection = ({\n                       todos,\n                       deleteTodo,\n                       editTodo,\n                       completeTodo,\n                       toggleAllTodo,\n                       clearCompleted\n                     }) => {\n  const [visibilityFilter, setFilter] = useState(SHOW_ALL);\n\n  const todosCount = todos.length;\n  const completedCount = todos.filter(({completed}) => completed).length;\n  let visibleTodos;\n  switch (visibilityFilter) {\n    case SHOW_ALL:\n      visibleTodos = todos;\n      break;\n    case SHOW_COMPLETED:\n      visibleTodos = todos.filter(t => t.completed);\n      break;\n    case SHOW_ACTIVE:\n      visibleTodos = todos.filter(t => !t.completed);\n      break;\n    default:\n      throw new Error(\"Unknown filter: \" + visibilityFilter);\n  }\n\n  return (\n    <section className=\"main\">\n      {!!todosCount && (\n        <span>\n          <input\n            className=\"toggle-all\"\n            type=\"checkbox\"\n            checked={completedCount === todosCount}\n            readOnly\n          />\n          <label onClick={toggleAllTodo}/>\n        </span>\n      )}\n      <TodoList\n        todos={visibleTodos}\n        deleteTodo={deleteTodo}\n        editTodo={editTodo}\n        completeTodo={completeTodo}\n      />\n      {!!todosCount && (\n        <Footer\n          visibilityFilter={visibilityFilter}\n          setFilter={setFilter}\n          completedCount={completedCount}\n          activeCount={todosCount - completedCount}\n          clearCompleted={clearCompleted}\n        />\n      )}\n    </section>\n  );\n};\n\nMainSection.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n      text: PropTypes.string.isRequired\n    }).isRequired\n  ).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  editTodo: PropTypes.func.isRequired,\n  toggleTodo: PropTypes.func.isRequired,\n  toggleAllTodo: PropTypes.func.isRequired,\n  clearCompleted: PropTypes.func.isRequired\n};\n\nexport default MainSection;\n","import React, { useEffect, useState } from \"react\";\nimport Header from \"./Header\";\nimport MainSection from \"./MainSection\";\nimport socket from \"../socket-api\";\n\nconst App = () => {\n  const [todos, setTodos] = useState([]);\n  useEffect(() => {\n    socket.emit('getTodos');\n    socket.on('TodoSend', msg => {\n      setTodos(msg);\n    });\n  }, []);\n  const addTodo = text => {\n    const id = Math.random();\n    socket.emit('addTodo', {id: id, text: text, completed: false})\n    /*    return dispatch => {\n          dispatch({type:ADD_TODO})\n        }*/\n  }\n\n  const deleteTodo = todo => {\n    socket.emit('deleteTodo', todo)\n    /*    return dispatch => {\n          dispatch({type: DELETE_TODO, todo})\n        }*/\n  }\n\n  const editTodo = (id, text) => {\n    socket.emit('updateTodo', {id: id, text: text, completed: false})\n    /*    return dispatch => {\n          dispatch({type: EDIT_TODO, id: id, text: text})\n        }*/\n  }\n\n  const completeTodo = (todo) => {\n    socket.emit('completeTodo', {id: todo._id, text: todo.text, completed: !todo.completed})\n    /*    return dispatch => {\n          dispatch({type: COMPLETE_TODO, todo})\n        }*/\n  }\n  const toggleAllTodo = () => {\n    const areAllMarked = todos.every(todo => todo.completed);\n    /* setTodos(\n       todos.map(todo => ({\n         ...todo,\n         completed: !areAllMarked\n       }))\n     );*/\n  };\n\n  const clearCompleted = () => {\n//    setTodos(todos.filter(todo => todo.completed === false));\n  }\n  return (\n    <div>\n      <Header addTodo={addTodo}/>\n      <MainSection\n        todos={todos}\n        deleteTodo={deleteTodo}\n        editTodo={editTodo}\n        completeTodo={completeTodo}\n        toggleAllTodo={toggleAllTodo}\n        clearCompleted={clearCompleted}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","// Add new GET_TODOS constant\nimport {\n  ADD_TODO,\n  CLEAR_COMPLETED,\n  COMPLETE_ALL,\n  COMPLETE_TODO,\n  DELETE_TODO,\n  EDIT_TODO,\n  GET_TODOS,\n  NEW_TODOS_DATA\n} from '../constants/ActionTypes'\n\n// Initial state is not needed anymore\nconst initialState = [\n  // {\n  //   text: 'Use Redux',\n  //   completed: false,\n  //   id: 0\n  // }\n]\n\nexport default function todos(state = initialState, action) {\n  switch (action.type) {\n    // Now as todo data is stored to server, we need to update whole state\n    case NEW_TODOS_DATA:\n      return [action.payload]\n    case GET_TODOS:\n      return [...state]\n    case ADD_TODO:\n      return [...state]\n    case DELETE_TODO:\n      return state.filter(todo =>\n        todo.id !== action.todo.id\n      )\n    case EDIT_TODO:\n      return state.map(todo =>\n        todo.id === action.id ?\n          {...todo, text: action.text} :\n          todo\n      )\n    case COMPLETE_TODO:\n      return state.map(todo => {\n        console.log(action)\n        return todo.id === action.todo.id ?\n          // No more toggling, completed state comes with action payload\n          // { ...todo, completed: !todo.completed } :\n          {...todo, completed: !action.todo.completed} :\n          todo\n      })\n    case COMPLETE_ALL:\n      const areAllMarked = state.every(todo => todo.completed)\n      return state.map(todo => ({\n        ...todo,\n        completed: !areAllMarked\n      }))\n    case CLEAR_COMPLETED:\n      return state.filter(todo => todo.completed === false)\n    default:\n      return state\n  }\n}\nexport const selectTodos = state =>{\n  return state.todos;\n}\n","import { combineReducers } from 'redux'\nimport todos from './todos'\n\nconst rootReducer = combineReducers({\n  todos\n})\n\nexport default rootReducer","export const ADD_TODO = 'ADD_TODO'\nexport const DELETE_TODO = 'DELETE_TODO'\nexport const EDIT_TODO = 'EDIT_TODO'\nexport const COMPLETE_TODO = 'COMPLETE_TODO'\nexport const COMPLETE_ALL = 'COMPLETE_ALL'\nexport const CLEAR_COMPLETED = 'CLEAR_COMPLETED'\nexport const GET_TODOS = 'GET_TODOS'\nexport const NEW_TODOS_DATA = 'NEW_TODOS_DATA'","import React from 'react'\nimport { render } from 'react-dom'\nimport { applyMiddleware, createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport App from './components/App'\nimport reducer from './reducers'\nimport 'todomvc-app-css/index.css'\n\nimport thunk from 'redux-thunk'\n\nconst store = createStore(reducer, applyMiddleware(thunk))\nrender(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}